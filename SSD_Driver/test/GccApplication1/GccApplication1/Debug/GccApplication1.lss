
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002b5  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d6  00000000  00000000  000004cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000260  00000000  00000000  000006a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000068  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001eb  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001d8  00000000  00000000  00000b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	6a 00       	.word	0x006a	; ????
  56:	6d 00       	.word	0x006d	; ????
  58:	70 00       	.word	0x0070	; ????
  5a:	73 00       	.word	0x0073	; ????
  5c:	76 00       	.word	0x0076	; ????
  5e:	79 00       	.word	0x0079	; ????
  60:	7c 00       	.word	0x007c	; ????
  62:	7f 00       	.word	0x007f	; ????
  64:	82 00       	.word	0x0082	; ????
  66:	85 00       	.word	0x0085	; ????
  68:	88 00       	.word	0x0088	; ????
  6a:	8b 00       	.word	0x008b	; ????
  6c:	8e 00       	.word	0x008e	; ????
  6e:	91 00       	.word	0x0091	; ????
  70:	94 00       	.word	0x0094	; ????
  72:	97 00       	.word	0x0097	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  84:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <main>:
#include "main.h"

int main(void)
{   
	SSD_Init();
  8c:	0e 94 5c 00 	call	0xb8	; 0xb8 <SSD_Init>
	TU08 i;
	while(1)
	{
		for(i = 0 ; i < 16 ; i++)
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	d0 e0       	ldi	r29, 0x00	; 0
		{
			SSD_Display_8Bit(i);
  94:	8c 2f       	mov	r24, r28
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 61 00 	call	0xc2	; 0xc2 <SSD_Display_8Bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e9       	ldi	r18, 0x9F	; 159
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x16>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x20>
  ac:	00 00       	nop
{   
	SSD_Init();
	TU08 i;
	while(1)
	{
		for(i = 0 ; i < 16 ; i++)
  ae:	cf 5f       	subi	r28, 0xFF	; 255
  b0:	c0 31       	cpi	r28, 0x10	; 16
  b2:	80 f3       	brcs	.-32     	; 0x94 <main+0x8>
  b4:	cd 2f       	mov	r28, r29
  b6:	ee cf       	rjmp	.-36     	; 0x94 <main+0x8>

000000b8 <SSD_Init>:
 */ 
#include "SSD.h"

void SSD_Init()
{
	SSD_DIR=0x7f;
  b8:	8f e7       	ldi	r24, 0x7F	; 127
  ba:	8a bb       	out	0x1a, r24	; 26
	#ifdef  SSD_COMMAN_CATHODE
		SSD_PORT=0x3f;
	#endif //SSD_COMMAN_CATHODE
	
	#ifdef SSD_COMMAN_ANODE
		SSD_PORT=0x40;
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	08 95       	ret

000000c2 <SSD_Display_8Bit>:
}

void SSD_Display_8Bit(TU08 number)
{
	symbole x = number;
	switch (x)
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	91 05       	cpc	r25, r1
  c8:	a0 f5       	brcc	.+104    	; 0x132 <SSD_Display_8Bit+0x70>
  ca:	fc 01       	movw	r30, r24
  cc:	e6 5d       	subi	r30, 0xD6	; 214
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__tablejump2__>
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x3f;
			#endif //SSD_COMMAN_CATHODE
			
			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0xc0;
  d4:	80 ec       	ldi	r24, 0xC0	; 192
  d6:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
  d8:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x06;//00110000
			#endif //SSD_COMMAN_CATHODE
			
			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0xf9;
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
  de:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x5b;
			#endif //SSD_COMMAN_CATHODE
		
			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0xa4;
  e0:	84 ea       	ldi	r24, 0xA4	; 164
  e2:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
  e4:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x4f;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0xb0;
  e6:	80 eb       	ldi	r24, 0xB0	; 176
  e8:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
  ea:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x66;
			#endif //SSD_COMMAN_CATHODE
			
			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x99;
  ec:	89 e9       	ldi	r24, 0x99	; 153
  ee:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
  f0:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x6d;
			#endif //SSD_COMMAN_CATHODE
		
			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x92;
  f2:	82 e9       	ldi	r24, 0x92	; 146
  f4:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
  f6:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x7d;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x82;
  f8:	82 e8       	ldi	r24, 0x82	; 130
  fa:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
  fc:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x07;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0xf8;
  fe:	88 ef       	ldi	r24, 0xF8	; 248
 100:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
 102:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x7f;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x80;
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
 108:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x6f;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x90;
 10a:	80 e9       	ldi	r24, 0x90	; 144
 10c:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
 10e:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x77;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x08;
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
 114:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x7c;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x03;
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
 11a:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x39;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x70;
 11c:	80 e7       	ldi	r24, 0x70	; 112
 11e:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
 120:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x5e;
			#endif //SSD_COMMAN_CATHODE

			#ifdef  SSD_COMMAN_ANODE
				SSD_PORT=0x21;
 122:	81 e2       	ldi	r24, 0x21	; 33
 124:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
 126:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x79;
			#endif //SSD_COMMAN_CATHODE

			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x30;
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	8b bb       	out	0x1b, r24	; 27
			#endif // SSD_COMMAN_ANODE
		break;
 12c:	08 95       	ret
			#ifdef  SSD_COMMAN_CATHODE
				SSD_PORT=0x71;
			#endif //SSD_COMMAN_CATHODE
			
			#ifdef SSD_COMMAN_ANODE
				SSD_PORT=0x38;
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	8b bb       	out	0x1b, r24	; 27
 132:	08 95       	ret

00000134 <__tablejump2__>:
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31

00000138 <__tablejump__>:
 138:	05 90       	lpm	r0, Z+
 13a:	f4 91       	lpm	r31, Z
 13c:	e0 2d       	mov	r30, r0
 13e:	09 94       	ijmp

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
